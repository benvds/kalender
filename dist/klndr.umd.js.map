{"version":3,"file":"klndr.umd.js","sources":["../src/klndr.ts"],"sourcesContent":["const daysPerWeek = 7;\n\ntype Kalender = Date[][];\ntype WeekStart = number;\ntype DateArgs = Date | IMonth | string;\n\ninterface IMonth {\n  year: number;\n  month: number;\n}\n\n/**\n *  Return a table of dates. Includes dates for missing days surrounding the\n *  month.\n *\n *  Examples:\n *      kal() == kal(new Date())\n *      kal(new Date(2014, 0, 31))\n *      kal({ year: 2014, month: 0 })\n *      kal('2014-1-31')\n *      kal('2014-1-31', 1)\n *      kal({ weekStart: 1 }) == kal(new Date(), 1)\n *\n *  @argument {Date|Object|String} dateArgs a value which represents a date.\n *              An object should contain a year and month value like, e.g.\n *              { year: 1999, month: 0 }. A string is passed to the Date\n *              constructor. When undefined calendar defaults to the current\n *              month\n *  @argument {Number} weekStart day in which the week starts. 0-based index,\n *              0 is sunday, 6 is saturday\n *\n *  @returns {Date[][]} nested arrays of dates grouped per week\n *\n */\ninterface IKalenderOptionsObj {\n  weekStart: WeekStart;\n}\ntype IKalenderOptions = WeekStart | IKalenderOptionsObj;\n\nexport default function kal(\n  dateArgs: DateArgs = new Date(),\n  options?: IKalenderOptions\n): Kalender {\n  const month = monthFromDateArgs(dateArgs);\n  const weekStart = parseOptions(options);\n  const days = calendarDays(month, weekStart);\n\n  return days.reduce(function fillCalendar(calendar, day, index) {\n    const weekIndex = Math.floor(index / daysPerWeek);\n    const dayIndex = index % daysPerWeek;\n\n    calendar[weekIndex][dayIndex] = day;\n\n    return calendar;\n  }, emptyCalendar(days.length));\n}\n\n/**\n *  Returns an array with the calendar dates. Includes surrounding days to fill\n *  all the weeks.\n *\n *  @argument {Date|Object|String|undefined} dateArgs a value which represents\n *              a date. An object should contain a year and month value like,\n *              e.g. { year: 1999, month: 0 }. A string is passed to the Date\n *              constructor. When undefined calendar defaults to the current\n *              month\n *  @argument {Number} weekStart day in which the week starts. 0-based index,\n *              0 is sunday, 6 is saturday\n *\n *  @returns {Date[]} an array of dates for the calendar\n *\n */\nfunction calendarDays(month: IMonth, weekStart: WeekStart): Date[] {\n  const startDayOfMonth = -1 * daysMissingBefore(month, weekStart);\n  const amountDays = totalDaysForMonth(month, weekStart);\n  const result = new Array(amountDays);\n\n  for (let i = 1; i <= amountDays; i++) {\n    result[i - 1] = new Date(month.year, month.month, startDayOfMonth + i);\n  }\n\n  return result;\n}\n\n/**\n *  Returns a year/month object from dateArgs. Defaults to the current month.\n *\n *  @argument {Date|Object|String|undefined} dateArgs\n *\n *  @returns {Object} a year/month object\n *\n */\nfunction monthFromDateArgs(dateArgs: DateArgs): IMonth {\n  if (dateArgs instanceof Date) {\n    return monthFromDate(dateArgs);\n  } else if (typeof dateArgs === \"object\") {\n    return dateArgs;\n  } else {\n    return monthFromDate(new Date(dateArgs));\n  }\n}\n\n/**\n *  Returns an object containing a year and month. Months use Date's 0-based\n *  index.\n *\n *  @argument {Date} date\n *\n *  @returns {IMonth} containing the date's year and month\n *\n */\nfunction monthFromDate(date: Date): IMonth {\n  return {\n    month: date.getMonth(),\n    year: date.getFullYear()\n  };\n}\n\n/**\n *  Returns the week start. The weekStart argument takes precedence otherwise\n *  it looks into a DateArgs object. Returns undefined if no weekStart is\n *  found.\n *\n *  @argument {Number} weekStart day in which the week starts\n *\n *  @returns {Number|undefined} the week start index\n *\n */\nfunction parseOptions(options?: IKalenderOptions): WeekStart {\n  const defaultWeekStart = 0;\n\n  if (typeof options === \"number\") {\n    return options;\n  } else if (typeof options === \"object\") {\n    return options.weekStart;\n  } else {\n    return defaultWeekStart;\n  }\n}\n\n/**\n *  Returns amount of days missing before the first of the month given a week\n *  starts on week start.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart 0 = sunday, 6 = saturday\n *\n *  @returns {Number} amount of days missing before the first day of the month\n *\n */\nfunction daysMissingBefore(month: IMonth, weekStart: WeekStart): number {\n  return (\n    (daysPerWeek - weekStart + new Date(month.year, month.month, 1).getDay()) %\n    daysPerWeek\n  );\n}\n\n/**\n *  Returns actual days in a month excluding surrounding days\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *\n *  @returns {Number} amount of days for a month excluding surrounding days\n *\n */\nfunction daysInMonth(month: IMonth): number {\n  return new Date(month.year, month.month + 1, 0).getDate();\n}\n\n/**\n *  Returns amount of weeks for a month including surrounding days.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart\n *\n *  @returns {Number} amount of weeks for a month including surrounding days\n *\n */\nfunction weeksForMonth(month: IMonth, weekStart: WeekStart): number {\n  return Math.ceil(\n    (daysInMonth(month) + daysMissingBefore(month, weekStart)) / daysPerWeek\n  );\n}\n\n/**\n *  Returns the totals days for a month including surrounding days.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart\n *\n *  @returns {Number} amount of days for a month including surrounding days\n *\n */\nfunction totalDaysForMonth(month: IMonth, weekStart: WeekStart): number {\n  return weeksForMonth(month, weekStart) * daysPerWeek;\n}\n\n/**\n *  Returns an empty table for the calendar dates.\n *\n *  @argument {Number} totalDays total number of days for the calendar\n *\n *  @returns {[][]} nested arrays for each week of the calendar\n *\n */\nfunction emptyCalendar(totalDays: number): Kalender {\n  const totalWeeks = totalDays / daysPerWeek;\n  const result = [];\n\n  for (let i = 0; i < totalWeeks; i++) {\n    result[i] = new Array(daysPerWeek);\n  }\n\n  return result;\n}\n"],"names":["const","daysPerWeek","monthFromDate","date","month","getMonth","year","getFullYear","daysMissingBefore","weekStart","Date","getDay","dateArgs","options","days","startDayOfMonth","amountDays","Math","ceil","getDate","daysInMonth","weeksForMonth","totalDaysForMonth","result","Array","i","calendarDays","monthFromDateArgs","parseOptions","reduce","calendar","day","index","floor","totalDays","totalWeeks","length","emptyCalendar"],"mappings":"oKAAAA,IAAMC,EAAc,EA+GpB,SAASC,EAAcC,SACd,CACLC,MAAOD,EAAKE,WACZC,KAAMH,EAAKI,eAqCf,SAASC,EAAkBJ,EAAeK,UAErCR,EAAcQ,EAAY,IAAIC,KAAKN,EAAME,KAAMF,EAAMA,MAAO,GAAGO,UAChEV,kBAlHFW,EACAC,kBADqB,IAAIH,UAKnBI,EA2BR,SAAsBV,EAAeK,WAC7BM,GAAmB,EAAIP,EAAkBJ,EAAOK,GAChDO,EA2HR,SAA2BZ,EAAeK,UAhB1C,SAAuBL,EAAeK,UAC7BQ,KAAKC,MAfd,SAAqBd,UACZ,IAAIM,KAAKN,EAAME,KAAMF,EAAMA,MAAQ,EAAG,GAAGe,UAe7CC,CAAYhB,GAASI,EAAkBJ,EAAOK,IAAcR,GAexDoB,CAAcjB,EAAOK,GAAaR,EA5HtBqB,CAAkBlB,EAAOK,GACtCc,EAAS,IAAIC,MAAMR,GAEhBS,EAAI,EAAGA,GAAKT,EAAYS,IAC/BF,EAAOE,EAAI,GAAK,IAAIf,KAAKN,EAAME,KAAMF,EAAMA,MAAOW,EAAkBU,UAG/DF,EApCMG,CA+Cf,SAA2Bd,UACrBA,aAAoBF,KACfR,EAAcU,GACQ,iBAAbA,EACTA,EAEAV,EAAc,IAAIQ,KAAKE,IAvDlBe,CAAkBf,GAqFlC,SAAsBC,SAGG,iBAAZA,EACFA,EACqB,iBAAZA,EACTA,EAAQJ,UALQ,EArFPmB,CAAaf,WAGxBC,EAAKe,OAAO,SAAsBC,EAAUC,EAAKC,UAItDF,EAHkBb,KAAKgB,MAAMD,EAAQ/B,IACpB+B,EAAQ/B,GAEO8B,EAEzBD,GA4JX,SAAuBI,WACfC,EA5JWrB,EAAKsB,OA4JSnC,EACzBsB,EAAS,GAENE,EAAI,EAAGA,EAAIU,EAAYV,IAC9BF,EAAOE,GAAK,IAAID,MAAMvB,UAGjBsB,EAnKJc"}