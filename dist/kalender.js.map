{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/kalender.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "const daysPerWeek = 7;\n\ntype Kalender = Date[][];\ntype WeekStart = number;\ntype DateArgs = Date | Month | string;\n\ninterface Month {\n    year: number;\n    month: number;\n}\n\n/**\n *  Return a table of dates. Includes dates for missing days surrounding the\n *  month.\n *\n *  Examples:\n *      kalender() == kalender(new Date())\n *      kalender(new Date(2014, 0, 31))\n *      kalender({ year: 2014, month: 0 })\n *      kalender('2014-1-31')\n *      kalender('2014-1-31', 1)\n *      kalender({ weekStart: 1 }) == kalender(new Date(), 1)\n *\n *  @argument {Date|Object|String} dateArgs a value which represents a date.\n *              An object should contain a year and month value like, e.g.\n *              { year: 1999, month: 0 }. A string is passed to the Date\n *              constructor. When undefined calendar defaults to the current\n *              month\n *  @argument {Number} weekStart day in which the week starts. 0-based index,\n *              0 is sunday, 6 is saturday\n *\n *  @returns {Date[][]} nested arrays of dates grouped per week\n *\n */\ninterface  KalenderOptionsObj {\n    weekStart: WeekStart;\n}\ntype KalenderOptions = WeekStart | KalenderOptionsObj;\n\nexport default function kalender(dateArgs: DateArgs = new Date(), options?: KalenderOptions): Kalender {\n    const month = monthFromDateArgs(dateArgs);\n    const weekStart = parseOptions(options);\n    const days = calendarDays(month, weekStart);\n\n    return days.reduce(function fillCalendar(calendar, day, index) {\n        const weekIndex = Math.floor(index / daysPerWeek);\n        const dayIndex = index % daysPerWeek;\n\n        calendar[weekIndex][dayIndex] = day;\n\n        return calendar;\n    }, emptyCalendar(days.length));\n}\n\n/**\n *  Returns an array with the calendar dates. Includes surrounding days to fill\n *  all the weeks.\n *\n *  @argument {Date|Object|String|undefined} dateArgs a value which represents\n *              a date. An object should contain a year and month value like,\n *              e.g. { year: 1999, month: 0 }. A string is passed to the Date\n *              constructor. When undefined calendar defaults to the current\n *              month\n *  @argument {Number} weekStart day in which the week starts. 0-based index,\n *              0 is sunday, 6 is saturday\n *\n *  @returns {Date[]} an array of dates for the calendar\n *\n */\nfunction calendarDays(month: Month, weekStart: WeekStart): Date[] {\n    const startDayOfMonth = -1 * daysMissingBefore(month, weekStart);\n    const amountDays = totalDays(month, weekStart);\n    let result = new Array(amountDays);\n\n    for (let i = 1; i <= amountDays; i++) {\n        result[i - 1] = new Date(month.year, month.month, startDayOfMonth + i);\n    }\n\n    return result;\n}\n\n/**\n *  Returns a year/month object from dateArgs. Defaults to the current month.\n *\n *  @argument {Date|Object|String|undefined} dateArgs\n *\n *  @returns {Object} a year/month object\n *\n */\nfunction monthFromDateArgs(dateArgs: DateArgs): Month {\n    if (dateArgs instanceof Date) {\n        return monthFromDate(dateArgs);\n    } else if (typeof dateArgs === 'object') {\n        return dateArgs;\n    } else {\n        return monthFromDate(new Date(dateArgs));\n    }\n}\n\n/**\n *  Returns an object containing a year and month. Months use Date's 0-based\n *  index.\n *\n *  @argument {Date} date\n *\n *  @returns {Month} containing the date's year and month\n *\n */\nfunction monthFromDate(date: Date): Month {\n    return {\n        year: date.getFullYear(),\n        month: date.getMonth()\n    };\n}\n\n/**\n *  Returns the week start. The weekStart argument takes precedence otherwise\n *  it looks into a DateArgs object. Returns undefined if no weekStart is\n *  found.\n *\n *  @argument {Number} weekStart day in which the week starts\n *\n *  @returns {Number|undefined} the week start index\n *\n */\nfunction parseOptions(options?: KalenderOptions): WeekStart {\n    const defaultWeekStart = 0;\n\n    if (typeof options === 'number') {\n        return options;\n    } else if (typeof options === 'object') {\n        return options.weekStart;\n    } else {\n        return defaultWeekStart;\n    }\n}\n\n/**\n *  Returns amount of days missing before the first of the month given a week\n *  starts on week start.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart 0 = sunday, 6 = saturday\n *\n *  @returns {Number} amount of days missing before the first day of the month\n *\n */\nfunction daysMissingBefore(month: Month, weekStart: WeekStart): number {\n    return (\n        daysPerWeek - weekStart + new Date(month.year, month.month, 1).getDay()\n    ) % daysPerWeek;\n}\n\n/**\n *  Returns actual days in a month excluding surrounding days\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *\n *  @returns {Number} amount of days for a month excluding surrounding days\n *\n */\nfunction daysInMonth(month: Month): number {\n    return new Date(month.year, month.month + 1, 0).getDate();\n}\n\n/**\n *  Returns amount of weeks for a month including surrounding days.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart\n *\n *  @returns {Number} amount of weeks for a month including surrounding days\n *\n */\nfunction weeksForMonth(month: Month, weekStart: WeekStart): number {\n    return Math.ceil(\n        (daysInMonth(month) +\n            daysMissingBefore(month, weekStart)) / daysPerWeek\n    );\n}\n\n/**\n *  Returns the totals days for a month including surrounding days.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart\n *\n *  @returns {Number} amount of days for a month including surrounding days\n *\n */\nfunction totalDays(month: Month, weekStart: WeekStart): number {\n    return weeksForMonth(month, weekStart) * daysPerWeek;\n}\n\n/**\n *  Returns an empty table for the calendar dates.\n *\n *  @argument {Number} totalDays total number of days for the calendar\n *\n *  @returns {[][]} nested arrays for each week of the calendar\n *\n */\nfunction emptyCalendar(totalDays: number): Kalender {\n    const totalWeeks = totalDays / daysPerWeek;\n    let result = [];\n\n    for (let i = 0; i < totalWeeks; i++) {\n        result[i] = new Array(daysPerWeek);\n    }\n\n    return result;\n}\n"
  ]
}