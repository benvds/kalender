{
  "version": 3,
  "sources": [
    "../../../../../usr/local/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/Users/benvds/code/web/kalender/src/kalender.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "const daysPerWeek = 7;\n\n/**\n *  Return a table of dates. Includes dates for missing days surrounding the\n *  month.\n *\n *  Examples:\n *      kalender() == kalender(new Date())\n *      kalender(new Date(2014, 0, 31))\n *      kalender({ year: 2014, month: 0 })\n *      kalender('2014-1-31')\n *      kalender('2014-1-31', 1)\n *      kalender({ weekStart: 1 }) == kalender(new Date(), 1)\n *\n *  @argument {Date|Object|String} dateValue a value which represents a date.\n *              An object should contain a year and month value like, e.g.\n *              { year: 1999, month: 0 }. A string is passed to the Date\n *              constructor. When undefined calendar defaults to the current\n *              month\n *  @argument {Number} weekStart day in which the week starts. 0-based index,\n *              0 is sunday, 6 is saturday\n *\n *  @returns {Date[][]} nested arrays of dates grouped per week\n *\n */\nexport default function kalender(dateValue, weekStart) {\n    const days = calendarDays(dateValue, weekStart);\n\n    return days.reduce(function fillCalendar(calendar, day, index) {\n        const weekIndex = Math.floor(index / daysPerWeek);\n        const dayIndex = index % daysPerWeek;\n\n        calendar[weekIndex][dayIndex] = day;\n\n        return calendar;\n    }, emptyCalendar(days.length));\n}\n\n/**\n *  Returns an array with the calendar dates. Includes surrounding days to fill\n *  all the weeks.\n *\n *  @argument {Date|Object|String|undefined} dateValue a value which represents\n *              a date. An object should contain a year and month value like,\n *              e.g. { year: 1999, month: 0 }. A string is passed to the Date\n *              constructor. When undefined calendar defaults to the current\n *              month\n *  @argument {Number} weekStart day in which the week starts. 0-based index,\n *              0 is sunday, 6 is saturday\n *\n *  @returns {Date[]} an array of dates for the calendar\n *\n */\nfunction calendarDays(dateValue, _weekStart) {\n    const { year, month } = yearAndMonth(dateValue);\n    const weekStart = parseWeekStart(dateValue, _weekStart);\n    const startDayOfMonth = -1 * daysMissingBefore(year, month, weekStart);\n    const amountDays = totalDays(year, month);\n    let result = new Array(amountDays);\n\n    for (let i = 1; i <= amountDays; i++) {\n        result[i - 1] = new Date(year, month, startDayOfMonth + i);\n    }\n\n    return result;\n}\n\n/**\n *  Returns a year/month object from dateValue. Defaults to the current month.\n *\n *  @argument {Date|Object|String|undefined} dateValue\n *\n *  @returns {Object} a year/month object\n *\n */\nfunction yearAndMonth(dateValue) {\n    if (dateValue instanceof Date) {\n        return yearAndMonthFromDate(dateValue);\n    } else if (typeof dateValue === 'object') {\n        return dateValue;\n    } else if (typeof dateValue === 'undefined') {\n        return yearAndMonthFromDate(new Date());\n    } else {\n        return yearAndMonthFromDate(new Date(dateValue));\n    }\n}\n\n/**\n *  Returns an object containing a year and month. Months use Date's 0-based\n *  index.\n *\n *  @argument {Date} date\n *\n *  @returns {Object} containing the date's year and month\n *\n */\nfunction yearAndMonthFromDate(date) {\n    return {\n        year: date.getFullYear(),\n        month: date.getMonth()\n    };\n}\n\n/**\n *  Returns the week start. The weekStart argument takes precedence otherwise\n *  it looks into a dateValue object. Returns undefined if no weekStart is\n *  found.\n *\n *  @argument {Date|Object|String|undefined} dateValue\n *  @argument {Number} weekStart day in which the week starts\n *\n *  @returns {Number|undefined} the week start index\n *\n */\nfunction parseWeekStart(dateValue, weekStart) {\n    if (typeof weekStart === 'number') {\n        return weekStart;\n    } else if (typeof dateValue === 'object') {\n        return dateValue.weekStart;\n    }\n}\n\n/**\n *  Returns amount of days missing before the first of the month given a week\n *  starts on week start.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart 0 = sunday, 6 = saturday\n *\n *  @returns {Number} amount of days missing before the first day of the month\n *\n */\nfunction daysMissingBefore(year, month, weekStart = 0) {\n    return (\n        daysPerWeek - weekStart + new Date(year, month, 1).getDay()\n    ) % daysPerWeek;\n}\n\n/**\n *  Returns actual days in a month excluding surrounding days\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *\n *  @returns {Number} amount of days for a month excluding surrounding days\n *\n */\nfunction daysInMonth(year, month) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\n/**\n *  Returns amount of weeks for a month including surrounding days.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart\n *\n *  @returns {Number} amount of weeks for a month including surrounding days\n *\n */\nfunction weeksForMonth(year, month, weekStart) {\n    return Math.ceil(\n        (daysInMonth(year, month) +\n            daysMissingBefore(year, month, weekStart)) / daysPerWeek\n    );\n}\n\n/**\n *  Returns the totals days for a month including surrounding days.\n *\n *  @argument {Number} year\n *  @argument {Number} month\n *  @argument {Number} weekStart\n *\n *  @returns {Number} amount of days for a month including surrounding days\n *\n */\nfunction totalDays(year, month, weekStart) {\n    return weeksForMonth(year, month, weekStart) * daysPerWeek;\n}\n\n/**\n *  Returns an empty table for the calendar dates.\n *\n *  @argument {Number} totalDays total number of days for the calendar\n *\n *  @returns {[][]} nested arrays for each week of the calendar\n *\n */\nfunction emptyCalendar(totalDays) {\n    const totalWeeks = totalDays / daysPerWeek;\n    let result = [];\n\n    for (let i = 0; i < totalWeeks; i++) {\n        result[i] = new Array(daysPerWeek);\n    }\n\n    return result;\n}\n"
  ]
}